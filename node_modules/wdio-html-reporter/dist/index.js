"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ReactDOMServer = require("react-dom/server");
var fs = require("fs-extra");
var path = require("path");
var events = require("events");
var renderer_1 = require("./renderer");
/**
 * Report test results in a single paged HTML file
 */
var HTMLReporter = /** @class */ (function (_super) {
    __extends(HTMLReporter, _super);
    function HTMLReporter(baseReporter, config, options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this) || this;
        _this.baseReporter = baseReporter;
        _this.config = config;
        _this.options = options;
        _this.runnerResults = [];
        if (!_this.options.outFile) {
            _this.outFile = path.resolve(process.cwd(), 'dist/wdio-html-report.html');
        }
        else {
            _this.outFile = _this.options.outFile;
        }
        var baseReporterStats = _this.baseReporter.stats;
        var screenshotPath = _this.config.screenshotPath;
        var screenshotsFolder = path.isAbsolute(screenshotPath)
            ? screenshotPath
            : path.join(process.cwd(), screenshotPath);
        _this.on('runner:start', function (runner) {
            var cid = runner.cid;
            var currentRunnerResult = {
                cid: cid,
                capabilities: runner.capabilities,
                runnerTestsNumber: {
                    failing: 0,
                    passing: 0,
                    pending: 0,
                },
                specFileHash: runner.specHash,
                specFilePath: runner.specs,
                suites: [],
            };
            _this.runnerResults.push(currentRunnerResult);
        });
        _this.on('runner:end', function (runner) {
            var cid = runner.cid;
            var specHash = runner.specHash;
            var suites = _this.getAllTestSuites(baseReporterStats.runners[cid].specs[specHash]);
            _this.getRunner(cid).suites = suites;
        });
        _this.on('test:pass', function (event) {
            _this.getRunner(event.cid).runnerTestsNumber.passing++;
        });
        _this.on('test:fail', function (event) {
            _this.getRunner(event.cid).runnerTestsNumber.failing++;
        });
        _this.on('test:pending', function (test) {
            _this.getRunner(test.cid).runnerTestsNumber.pending++;
        });
        _this.on('runner:end', function (_event) {
            _this.generateHTML();
        });
        return _this;
    }
    HTMLReporter.prototype.getAllTestSuites = function (spec) {
        var suites = [];
        Object.keys(spec.suites).map(function (suiteName) {
            var specSuites = spec.suites[suiteName];
            if (Object.keys(specSuites.tests).length !== 0)
                suites.push(specSuites);
        });
        return suites;
    };
    HTMLReporter.prototype.getRunner = function (cid) {
        var res = this.runnerResults.find(function (r) { return r.cid === cid; });
        if (!res) {
            throw new Error("Results with runner CID " + cid + " not found.");
        }
        return res;
    };
    HTMLReporter.prototype.generateHTML = function () {
        var html = "<!DOCTYPE html>\n            " + ReactDOMServer.renderToStaticMarkup(React.createElement(renderer_1.ReportRenderer, { runnerResults: this.runnerResults, basePath: path.dirname(this.outFile) }));
        fs.writeFileSync(this.outFile, html);
        console.info('[INFO] wrote html report to', this.outFile);
    };
    return HTMLReporter;
}(events.EventEmitter));
module.exports = HTMLReporter;
