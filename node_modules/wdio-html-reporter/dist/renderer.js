"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var path = require("path");
var ReportRenderer = /** @class */ (function (_super) {
    __extends(ReportRenderer, _super);
    function ReportRenderer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ReportRenderer.prototype, "css", {
        get: function () {
            return "\n            html, body {\n                font-family: sans-serif;\n            }\n\n            main {\n                margin: 1rem;\n            }\n\n            .fail {\n                background: #f08080;\n            }\n\n            .fade {\n                opacity: 0.5;\n            }\n\n            .mono {\n                font-family: monospace;\n            }\n\n            td {\n                padding: 0.25rem;\n                vertical-align: top;\n            }\n\n            p {\n                margin: 0;\n            }\n\n            img {\n                display: block;\n                max-width: 100%;\n            }\n        ";
        },
        enumerable: true,
        configurable: true
    });
    ReportRenderer.prototype.render = function () {
        var _this = this;
        var runnerResults = this.props.runnerResults;
        return (React.createElement("html", null,
            React.createElement("head", null,
                React.createElement("meta", { charSet: "utf-8" }),
                React.createElement("meta", { name: "viewport", content: "width=device-width" }),
                React.createElement("title", null, "HTML Report"),
                React.createElement("style", null, this.css)),
            React.createElement("body", null,
                React.createElement("main", null, runnerResults.map(function (result, i) { return (React.createElement(ResultPresenter, { key: i, result: result, basePath: _this.props.basePath })); })))));
    };
    return ReportRenderer;
}(React.Component));
exports.ReportRenderer = ReportRenderer;
var ResultPresenter = /** @class */ (function (_super) {
    __extends(ResultPresenter, _super);
    function ResultPresenter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ResultPresenter.prototype.render = function () {
        var _this = this;
        var result = this.props.result;
        var isFailing = result.runnerTestsNumber.failing > 0;
        return (React.createElement("div", { className: isFailing ? 'failing-result' : '' },
            React.createElement("h1", null,
                React.createElement("code", null, result.cid)),
            React.createElement("span", null,
                result.runnerTestsNumber.passing,
                " Passing "),
            React.createElement("span", null,
                result.runnerTestsNumber.pending,
                " Pending "),
            React.createElement("span", null,
                result.runnerTestsNumber.failing,
                " Failing "),
            React.createElement("p", null, "Capabilities"),
            React.createElement("div", null,
                React.createElement("pre", null, JSON.stringify(result.capabilities, null, 4))),
            result.suites.map(function (suite, i) { return (React.createElement(SuitePresenter, { key: i, suite: suite, basePath: _this.props.basePath })); })));
    };
    return ResultPresenter;
}(React.Component));
var SuitePresenter = /** @class */ (function (_super) {
    __extends(SuitePresenter, _super);
    function SuitePresenter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SuitePresenter.prototype.render = function () {
        var _this = this;
        var suite = this.props.suite;
        var stateEmoji = {
            fail: '❌',
            pending: '⏸',
            pass: '✅',
        };
        return (React.createElement("div", null,
            React.createElement("h2", null, suite.title),
            React.createElement("table", null,
                React.createElement("tbody", null, Object.keys(suite.tests).map(function (k, i) {
                    var test = suite.tests[k];
                    var consoleMessages = _this.getTestConsoleOutput(test);
                    var screenshots = _this.getTestScreenshots(test);
                    return (React.createElement("tr", { key: i, className: test.state },
                        React.createElement("td", null, stateEmoji[test.state]),
                        React.createElement("td", null,
                            React.createElement("p", null,
                                React.createElement("b", null, test.title)),
                            React.createElement("p", { className: "fade" }, _this.getTestDuration(test))),
                        React.createElement("td", null,
                            test.error && React.createElement(TestErrorPresenter, { error: test.error }),
                            consoleMessages && React.createElement(ConsoleMessagePresenter, { messages: consoleMessages }),
                            screenshots.map(function (screenshot, i) { return (React.createElement("img", { src: path.relative(_this.props.basePath, screenshot), key: i })); }))));
                })))));
    };
    SuitePresenter.prototype.getTestDuration = function (test) {
        return test._duration + 'ms';
    };
    /** Look for browser console output of test result */
    SuitePresenter.prototype.getTestConsoleOutput = function (test) {
        var consoleOutput = test.output.find(function (output) {
            try {
                return output.type === 'result' && output.payload.requestOptions.uri.pathname.endsWith('/log');
            }
            catch (_a) {
                return false;
            }
        });
        if (!consoleOutput) {
            return undefined;
        }
        return consoleOutput.payload.body.value;
    };
    SuitePresenter.prototype.getTestScreenshots = function (test) {
        return test.output.filter(function (output) { return output.type === 'screenshot'; }).map(function (output) { return output.payload.filename; });
    };
    return SuitePresenter;
}(React.Component));
var TestErrorPresenter = function (_a) {
    var error = _a.error;
    return (React.createElement("div", null,
        React.createElement("p", null,
            React.createElement("b", null, error.type)),
        React.createElement("p", null, error.message),
        React.createElement("p", null,
            "Expected ",
            React.createElement("code", null, error.expected)),
        React.createElement("p", null,
            "Actual ",
            React.createElement("code", null, error.actual)),
        React.createElement("pre", null, error.stack)));
};
var ConsoleMessagePresenter = /** @class */ (function (_super) {
    __extends(ConsoleMessagePresenter, _super);
    function ConsoleMessagePresenter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ConsoleMessagePresenter.prototype.render = function () {
        var levelEmoji = {
            WARNING: '⚠️',
            SEVERE: '❌',
            INFO: 'ℹ️',
        };
        if (!this.props.messages.length) {
            return null;
        }
        return (React.createElement(React.Fragment, null,
            React.createElement("p", null,
                React.createElement("b", null, "Browser console output")),
            React.createElement("table", { className: "mono" },
                React.createElement("tbody", null, this.props.messages.map(function (message, i) { return (React.createElement("tr", { className: message.level, key: i },
                    React.createElement("td", null, levelEmoji[message.level]),
                    React.createElement("td", null, message.message))); })))));
    };
    return ConsoleMessagePresenter;
}(React.Component));
exports.ConsoleMessagePresenter = ConsoleMessagePresenter;
